
clear all;
clear java      %reload the class, incase we messed with it
javaaddpath('D:\Programming\Java Workspace Eclipse\AxonModel');

%initialize parameters, meters and seconds
stim = 150e-6;      %in amps
dt = 1e-7;      %time increment
num_dt = 400000;   %number of time steps

nd = 1.4e-6;     %node diameter
num_n = 29;    %number of nodes
axon = G_AHPAxon_CVStar0265([151e-6; 150.5e-6; -1], [nd; -1],[2e-6;1e-6;-1], [300e-6;-1], num_n, dt, num_dt);

Vrest = -.0846;

load GoldbergParadigm_Mean_ExtracellularPotentials
Ve = LH_RegAff_mean;

%set external potential
waveForm = zeros(1, num_dt);
waveForm(:) = stim;

R = Axon.quickSimulate(axon, num_dt, Ve, waveForm);
intS = find(R == 1);
temp2 = zeros(size(intS,1)-1,1);
temp3 = zeros(size(intS,1)-1,1);
for (i = 1:(size(intS,1)-1))
    temp2(i) = intS(i+1)-intS(i);
    temp2(i) = temp2(i)*dt;
    temp3(i) = temp2(i);
    temp2(i) = 1/temp2(i);
end
lt = temp2;
dp = temp3;
%for iterator = 1:9
%    axon = G_AHPAxon_CVStar0265([step; -1], [nd; -1],[al;-1], [pl;-1], num_n, dt, num_dt);
%    R = Axon.quickSimulate(axon, num_dt, Ve, waveForm);
%    intS = find(R == 1);
%    temp2 = zeros(size(intS,1)-1,1);
%    temp3 = zeros(size(intS,1)-1,1);
%    for (i = 1:(size(intS,1)-1))
%        temp2(i) = intS(i+1)-intS(i);
%        temp2(i) = temp2(i)*dt;
%        temp3(i) = temp2(i);
%        temp2(i) = 1/temp2(i);
%    end
%    lt = [lt; temp2];
%    dp = [dp; temp3];
%end


temp = axon.V;
qx = 1:(num_dt);
qx = qx*dt;
plot(qx*10000, (temp(1,:)+Vrest)*1000, '-b');%, qx*1000, (temp(19,:)+Vrest)*1000, '-r');


meanIntS = mean(lt);
stdIntS = std(lt);
disp(['Mean firing rate: ' num2str(meanIntS)])
disp(['Firing rate std dev: ' num2str(stdIntS)])
meanPer = mean(dp);
stdPer = std(dp);
disp(['Mean interval: ' num2str(meanPer)])
disp(['Interval std dev: ' num2str(stdPer)])
disp(['CV: ' num2str(stdPer/meanPer)])
%meanInterval = meanPer*1000;
%tableInterval = (meanInterval-7.5)/5;
%A = (0.84-0.56)*tableInterval + 0.56;
%B = (0.97-0.81)*tableInterval + 0.81;
%cvStar = ((stdPer/meanPer)/A)^(1/B);   %for a mean interval of 10mS
%disp(['CV*: ' num2str(cvStar)])

%figure;
%plot(qx*1000, R);


%qx = 1:(num_dt);
%qx = qx*dt;
%temp = axon.V;
%plot(qx*10000, (temp(1,:)+Vrest)*1000, '-r',qx*10000, (temp(2,:)+Vrest)*1000, '-g',qx*10000, (temp(3,:)+Vrest)*1000, '-b');
%title('Time course of V for node 1 (red) 2 (green) and odd nodes > 2 (blue)');
%hold on
%plot(qx*10000, (temp(20,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(19,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(17,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(15,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(13,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(11,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(9,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(7,:)+Vrest)*1000, '-b')
%plot(qx*10000, (temp(5,:)+Vrest)*1000, '-b')

%[Y1, I1] = max(axon.V(5,:));
%[Y2, I2] = max(axon.V(7,:));

%disp(['Spike Height (mV): ' num2str(Y1*1000)])
%time = (I2-I1)*dt;
%speed = (pl+al)/time;
%disp(['Conduction velocity (m/s): ' num2str(speed)])

