%% FEM_data_output.m
% Script for extracting voltage and nerve vector field data from an FEM
% model. The voltage will be used to find an extracellular voltage at each
% node on an axon. The vector fields generated from the curvilinear
% coordinates flow method are used to generate trajectories for axons
% within each nerve. Must have the Matlab-Comsol API running and the solved
% model open, with the modelClient saved in the worskpace variable model.
% Should also have the voltage tags saved as a cell array in case the
% number of electrode pairs is not always the same.
% October 2022, Evan Vesper, VNEL
tic

%% Define Comsol tags
geom_tag = 'geom1';

dset_fac = 'dset1';
sel_fac_dom = 'geom1_imp1_Facial_Nerve1_dom'; % selection for facial nerve domain
dset_coch = 'dset2';
sel_coch_dom = 'geom1_imp1_Cochlear_Nerve1_dom'; % selection for cochlear nerve domain
dset_vest = 'dset3'; % tag for the dataset containing vestibular nerve flow vector field
sel_vest_dom = 'geom1_imp1_Vestibular_Nerve1_dom'; % selection for vestibular nerve domain

sel_facial_inlet = 'geom1_sel1';
sel_facial_outlet = 'geom1_sel2';
sel_coch_inlet = 'geom1_sel3';
sel_coch_outlet = 'geom1_sel4';
sel_vest_inlet_bnd = 'geom1_sel5'; % boundary selection for vestibular nerve inlet (proximal end of nerve)
sel_vest_outlet_bnd = 'geom1_sel6'; % boundary selection for vestibular nerve outlet (cristas for 3 canals and otolith organs)

% boundary selections for individual crista
sel_post_crista_bnd = 'geom1_sel7'; % posterior canal crista
sel_lat_crista_bnd = 'geom1_sel8'; % lateral canal crista
sel_ant_crista_bnd = 'geom1_sel9'; % anterior canal crista
sel_sacc_crista_bnd = 'geom1_sel10'; % saccule crista
sel_utr_crista_bnd = 'geom1_sel11'; % utricle crista

% tags for vector field data
% velTags = {'cc3.vX','cc3.vY','cc3.vY'}; % velocity field, but this doesn't generate proper trajectories
basisVecTagsFac = {'cc.e1x','cc.e1y','cc.e1z'}; % facial nerve
basisVecTagsCoch = {'cc2.e1x','cc2.e1y','cc2.e1z'}; % cochlear nerve
basisVecTagsVest = {'cc3.e1x','cc3.e1y','cc3.e1z'}; % basis vector 1 (along the axon)
basisVec2TagsVest = {'cc3.e2x','cc3.e2y','cc3.e2z'}; % basis vector 2 (orthogonal to other two vectors)
basisVec3TagsVest = {'cc3.e3x','cc3.e3y','cc3.e3z'}; % basis vector 3 (orthogonal to other two vectors)

% tags for electric potential and currents
vTags = {'V2_1','V2_3','V2_4','V2_5','V2_6','V2_7'};
% JTags = {'ec.Jx','ec.Jy','ec.Jz',...
%     'ec2.Jx','ec2.Jy','ec2.Jz',...
%     'ec3.Jx','ec3.Jy','ec3.Jz',...
%     'ec4.Jx','ec4.Jy','ec4.Jz',...
%     'ec5.Jx','ec5.Jy','ec5.Jz',...
%     'ec6.Jx','ec6.Jy','ec6.Jz'};

% tags for electrical currents physics nodes
ecTags = {'ec','ec2','ec3','ec4','ec5','ec6'};
dset_ec = 'dset4'; % dataset for electric currents

% get current date for save file name
fileDate = date;

%% Extract flow information
% get flow vector field values for vestibular nerve
% selection argument pair means fxn will only return vector field data 
% within the selection specified (also the only volume it was actually calculated for)
flow_fac = mpheval(model,basisVecTagsFac,'dataset',dset_fac,'selection',sel_fac_dom);
flow_coch = mpheval(model,basisVecTagsCoch,'dataset',dset_coch,'selection',sel_coch_dom);
flow_vest = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_vest_dom);

% get the mesh data for the facial and cochlear ends
flow_facial_inlet = mpheval(model,basisVecTagsFac,'dataset',dset_fac,'selection',sel_facial_inlet);
flow_facial_outlet = mpheval(model,basisVecTagsFac,'dataset',dset_fac,'selection',sel_facial_outlet);
flow_coch_inlet = mpheval(model,basisVecTagsCoch,'dataset',dset_coch,'selection',sel_coch_inlet);
flow_coch_outlet = mpheval(model,basisVecTagsCoch,'dataset',dset_coch,'selection',sel_coch_outlet);

% get the mesh data for the crista
flow_post_crista = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_post_crista_bnd);
flow_lat_crista = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_lat_crista_bnd);
flow_ant_crista = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_ant_crista_bnd);
flow_sacc_crista = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_sacc_crista_bnd);
flow_utr_crista = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_utr_crista_bnd);
flow_vestinlet = mpheval(model,basisVecTagsVest,'dataset',dset_vest,'selection',sel_vest_inlet_bnd);

% get voltage and electric current density values for all node points
% within vestibular nerve, for all electrode combinations
% ec_vest = mpheval(model,ecTags,'dataset',dset_ec,'selection',sel_vest_dom);

%%
% reverese direction of flow since we want it going from crista towards
% brainstem - double check how you defined it in Comsol first!!!
flow_vest_fixed = flow_vest;
flow_vest_fixed.d1 = -1*flow_vest.d1;
flow_vest_fixed.d2 = -1*flow_vest.d2;
flow_vest_fixed.d3 = -1*flow_vest.d3;

flow_coch_fixed = flow_coch;
flow_coch_fixed.d1 = -1*flow_coch.d1;
% %%
% flow_vest_tocrista = flow_vest;
% %%
% flow_vest_fromcrista = flow_vest;
%% Generate trajectories for all nerve divisions
step = [301e-3; 300.5e-3; -1];
% step = [.0001; -1];
numAxons = 50;
[traj_fac_pre, fiberType1, p0_fac] = fiberGenComsol(flow_fac,flow_facial_inlet,numAxons,step);
[traj_coch_pre, fiberType1, p0_coch] = fiberGenComsol(flow_coch,flow_coch_inlet,numAxons,step);
[traj_vestinlet_pre, fiberType1, p0_test_inlet] = fiberGenComsol(flow_vest,flow_vestinlet,numAxons*5,step);

[traj_post_pre, fiberType1, p0_post_crista] = fiberGenComsol(flow_vest_fixed,flow_post_crista,numAxons,step);
[traj_lat_pre, fiberType1, p0_lat_crista] = fiberGenComsol(flow_vest_fixed,flow_lat_crista,numAxons,step);
[traj_ant_pre, fiberType1, p0_ant_crista] = fiberGenComsol(flow_vest_fixed,flow_ant_crista,numAxons,step);
[traj_sacc_pre, fiberType1, p0_sacc_crista] = fiberGenComsol(flow_vest_fixed,flow_sacc_crista,numAxons,step);
[traj_utr_pre, fiberType1, p0_utr_crista] = fiberGenComsol(flow_vest_fixed,flow_utr_crista,numAxons,step);

% remove all the trajectories that aren't long enough (hit the wall of the
% nerve). In the future I need to fix the flow to avoid this happening, or
% change the fiberGenComsol/strream3Comsol function(s) to keep trying new
% starting points until I get the desired number of axons (like a Monte
% Carlo method).
% all_trajs = {raj_post_pre,traj_lat_pre,traj_ant_pre,traj_sacc_pre,traj_utr_pre,traj_vestinlet_pret};
all_trajs = {traj_post_pre,traj_lat_pre,traj_ant_pre,traj_sacc_pre,traj_utr_pre, traj_fac_pre, traj_coch_pre, traj_vestinlet_pre};
numActualAxonsAll = zeros(length(all_trajs),1);
toKeep = cell(length(all_trajs),1);
for i = 1:length(all_trajs)
    toKeep{i} = false(numAxons,1);
    for j = 1:size(all_trajs{i},1)
        arcLens = sqrt(sum( (all_trajs{i}{j,3}(:,2:end) - all_trajs{i}{j,3}(:,1:end-1)).^2 ,1));
        totLen = sum(arcLens);
        if totLen >= 5 % length of trajectory must be at least 6 mm
            toKeep{i}(j) = true;
        end
    end
    all_trajs{i} = all_trajs{i}(toKeep{i},:);
    numActualAxonsAll(i) = size(all_trajs{i},1);
    disp([num2str(numActualAxonsAll(i)),' axons succesfully generated in nerve ',num2str(i),'.'])
end

traj_post = all_trajs{1};
traj_lat = all_trajs{2};
traj_ant = all_trajs{3};
traj_sacc = all_trajs{4};
traj_utr = all_trajs{5};
traj_fac = all_trajs{6};
traj_coch = all_trajs{7};
traj_vestinlet = all_trajs{8};
clear all_trajs
beep

%%
% save(['trajs_',fileDate],"traj_vestinlet","traj_post","traj_lat","traj_ant","traj_sacc","traj_utr")
save(['trajs_',fileDate],"traj_post","traj_lat","traj_ant","traj_sacc","traj_utr")


%% Testing fiberGenComsol with interpolation to node points
% step_vec_test = [301e-3; 300.5e-3; -1]; % units are mm - [301 um; 300.5 um; -1]
% 
% [traj_test2, fiberType2, p0_test2] = fiberGenComsol(flow_vest_fixed,flow_ant_crista,50,step_vec_test);
% 
% toKeep = [];
% for j = 1:size(traj_test2,1)
%     if length(traj_test2{j,2}) > 20
%         toKeep = [toKeep, j];
%     end
% end
% traj_test2 = traj_test2(toKeep,:);
% disp([num2str(size(traj_test2,1)),' axons succesfully generated.'])
% plotFlow(flow_vest_fixed, flow_ant_crista,traj_test2(:,3));
% title('Succesful test\_traj2 axons')

%% Extract Ve at node points
% % testing mphinterp alone
% [var1, curr1] = mphinterp(model,{'V2_7','ec.Jx'},'coord', traj_test2{1,3}, 'dataset', dset_ec);
% var1 = var1';

%% Testing sampleFEM
current = 200e-6; % 200 uA
tic
[solutionBigCell] = sampleFEM(model,vTags,ecTags,dset_ec,traj_test2,current);
toc
% current normalization has been added to sampleFEM function
% % normalize by total current delivered
% for i = 1:length(solutionBigCell)
%     for j = 1:size(solutionBigCell{i},1)
%         solutionBigCell{i}{j,3} = solutionBigCell{i}{j,3}/current;
%     end
% end
%% Testing sampleFEM with one variable
clear solutionBigCell
tic
[solutionBigCell] = sampleFEM(model,vTags,ecTags,dset_ec,traj_test2,current);
toc
% make stim anodic and scale by 1/2 to be more similar to Abder's
% simulations
for i = 1:length(solutionBigCell)
    for j = 1:size(solutionBigCell{i},1)
        solutionBigCell{i}{j,3} = -1*solutionBigCell{i}{j,3}/2;
    end
end
%% Full FEM sampling along all trajectories
sol_post = []; sol_lat = []; sol_ant = []; sol_sacc = []; sol_utr = [];

sol_post = sampleFEM(model,vTags,ecTags,dset_ec,traj_post,current);
sol_lat = sampleFEM(model,vTags,ecTags,dset_ec,traj_lat,current);
sol_ant = sampleFEM(model,vTags,ecTags,dset_ec,traj_ant,current);
% sol_sacc = sampleFEM(model,vTags,ecTags,dset_ec,traj_sacc,current);
% sol_utr = sampleFEM(model,vTags,ecTags,dset_ec,traj_utr,current);

%% Generate Parameter cells for each nerve
Vthresh = 0.085; % aactivation threshold relative to resting membrane potential, V

param_post = cell(9,1);
param_post{1} = [numActualAxonsAll(1); 1; numActualAxonsAll(1)]; % [number of axons, first axon, last axon]
param_post{2} = 1e-7; % timestep, s
param_post{3} = [2e-6; 1e-6;-1]; % active node (nodes of Ranvier) lengths, m
param_post{4} = [300e-6; -1]; % passive node (internode) lengths, m
param_post{5} = ones(numAxons,1)*[1.4e-6, -1]; % fiber diameters at each node, m
param_post{6} = rand(150,1); % initial state array
param_post{7} = Vthresh; % activation threshold voltage, V
param_post{8} = [100; 300]; % limit on fine threshold
param_post{9} = 0.01; % precision for finding thresholds, i.e. 0.01 = 1%

% This copies the same parameters for all nerves, except it makes sure 
param_lat = param_post;
param_lat{1} = [numActualAxonsAll(2); 1; numActualAxonsAll(2)];
param_lat{6} = rand(150,1);
param_ant = param_post;
param_ant{1} = [numActualAxonsAll(3); 1; numActualAxonsAll(3)];
param_ant{6} = rand(150,1);
param_sacc = param_post;
param_sacc{1} = [numActualAxonsAll(4); 1; numActualAxonsAll(4)];
param_sacc{6} = rand(150,1);
param_utr = param_post;
param_utr{1} = [numActualAxonsAll(5); 1; numActualAxonsAll(5)];
param_utr{6} = rand(150,1);

%% Create parameter cell
% NOTE: the java Axon models expect everything in meters, not mm so make
% sure to convert internode distances, diameters, etc...
numActualAxons = size(solutionBigCell{1},1);
Vthresh = 0.085; % aactivation threshold relative to resting membrane potential, V

parameterTest = cell(9,1);
parameterTest{1} = [numActualAxons; 1; numActualAxons]; % [number of axons, first axon, last axon]
parameterTest{2} = 1e-7; % timestep, s
parameterTest{3} = [2e-6; 1e-6;-1]; % active node (nodes of Ranvier) lengths, m
parameterTest{4} = [300e-6; -1]; % passive node (internode) lengths, m
parameterTest{5} = ones(numActualAxons,1)*[1.4e-6, -1]; % fiber diameters at each node, m
parameterTest{6} = rand(150,1); % initial state array
parameterTest{7} = Vthresh; % activation threshold voltage, V
parameterTest{8} = [100; 300]; % limit on fine threshold
parameterTest{9} = 0.01; % precision for finding thresholds, i.e. 0.01 = 1%


%% Save parameter cell, trajectory cell, solution cell, waveform, and total current for simulation...
save(['testSolution',fileDate],'parameterTest','traj_test2','solutionBigCell','waveForm','current')


%% Save parameter cell, solution cells, waveform, and total current for simulation...
save(['fullSolution',fileDate],'param_post','param_lat','param_ant',...
    'param_sacc','param_utr','sol_post','sol_lat','sol_ant','sol_sacc',...
    'sol_utr','waveForm','current')

%% Generate streamlines/axon trajectories straight from stream3Comsol
% step_test = 0.1;
% traj_vestinlet = stream3Comsol(flow_vest.p,flow_vest.t,flow_vest.d1,flow_vest.d2,flow_vest.d3,p0_test_inlet,step_test); % with lowercase basis vector
% % traj2 = stream3Comsol(flow_vest2.p,flow_vest2.t,flow_vest2.d1,flow_vest2.d2,flow_vest2.d3,p0_test,step_test); % with uppercase basis vector
% d1fixed = -1*flow_vest.d1;
% d2fixed = -1*flow_vest.d2;
% d3fixed = -1*flow_vest.d3;
% traj_post = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_post_crista,step_test);
% traj_lat = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_lat_crista,step_test);
% traj_ant = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_ant_crista,step_test);
% traj_sacc = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_sacc_crista,step_test);
% traj_utr = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_utr_crista,step_test);
%% Testing step vector stream3 function
% step_vec_test = [301e-3; 300.5e-3; -1]; % units are mm
% traj_post_test = stream3Comsol(flow_vest.p,flow_vest.t,d1fixed,d2fixed,d3fixed,p0_post_crista,step_vec_test);
% figure
% plotFlow(flow_vest,flow_post_crista,traj_post_test,'plotFlow',false)

%% interparc testing
% this is a function I found online that should let me interpolate a curve
% and then choose points along it (based on arclength). This would be for
% having a very small step size to generate the intial streamline for each
% axon and then sample along the streamline to choose nodes. Might result
% in a less zig-zaggy axon.

% interparcTest = interparc(0:0.3:1,traj_lat_crista{1}(1,:),traj_lat_crista{1}(2,:),traj_lat_crista{1}(3,:));
% figure
% plot3(interparcTest(:,1),interparcTest(:,2),interparcTest(:,3),'o-')
%% Plot everything
% plot crista origin results
f12 = plotFlow(flow_vest_fixed,flow_post_crista,traj_post_pre(toKeep{1},3));
badTraj = traj_post_pre(~toKeep{1},3);
for i = 1:sum(~toKeep{1})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Post. Crista Origin')
f22 = plotFlow(flow_vest_fixed,flow_lat_crista,traj_lat_pre(toKeep{2},3));
badTraj = traj_lat_pre(~toKeep{2},3);
for i = 1:sum(~toKeep{2})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Lat. Crista Origin')
f32 = plotFlow(flow_vest_fixed,flow_ant_crista,traj_ant_pre(toKeep{3},3));
badTraj = traj_ant_pre(~toKeep{3},3);
for i = 1:sum(~toKeep{3})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Ant. Crista Origin')
f42 = plotFlow(flow_vest_fixed,flow_sacc_crista,traj_sacc_pre(toKeep{4},3));
badTraj = traj_sacc_pre(~toKeep{4},3);
for i = 1:sum(~toKeep{4})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Sacc. Crista Origin')
f52 = plotFlow(flow_vest_fixed,flow_utr_crista,traj_utr_pre(toKeep{5},3));
badTraj = traj_utr_pre(~toKeep{5},3);
for i = 1:sum(~toKeep{5})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Utr. Crista Origin')

f62 = plotFlow(flow_fac,flow_facial_inlet,traj_fac_pre(toKeep{6},3));
badTraj = traj_fac_pre(~toKeep{6},3);
for i = 1:sum(~toKeep{6})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Facial Nerve')
f72 = plotFlow(flow_coch,flow_coch_inlet,traj_coch_pre(toKeep{7},3));
badTraj = traj_coch_pre(~toKeep{7},3);
for i = 1:sum(~toKeep{7})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Cochlear Nerve')
f82 = plotFlow(flow_vest_fixed,flow_vestinlet,traj_vestinlet_pre(toKeep{8},3));
badTraj = traj_vestinlet_pre(~toKeep{8},3);
for i = 1:sum(~toKeep{8})
    plot3(badTraj{i}(1,:), badTraj{i}(2,:), badTraj{i}(3,:), '-r.')
end
title(gca,'Axial Vestibular Origin')


%% Plot incomplete trajectories
% plot vestibular inlet results
f1 = plotFlow(flow_vest,flow_vestinlet,traj_vestinlet(:,3));
title(gca,'Vest. Inlet Origin')

% plot crista origin results
f2 = plotFlow(flow_vest_fixed,flow_post_crista,traj_post(:,3));
title(gca,'Post. Crista Origin')
f3 = plotFlow(flow_vest_fixed,flow_lat_crista,traj_lat(:,3));
title(gca,'Lat. Crista Origin')
f4 = plotFlow(flow_vest_fixed,flow_ant_crista,traj_ant(:,3));
title(gca,'Ant. Crista Origin')
f5 = plotFlow(flow_vest_fixed,flow_sacc_crista,traj_sacc(:,3));
title(gca,'Sacc. Crista Origin')
f6 = plotFlow(flow_vest_fixed,flow_utr_crista,traj_utr(:,3));
title(gca,'Utr. Crista Origin')
%%
% plot all the crista trajectories together
flows_crista = {flow_vestinlet,flow_post_crista,flow_lat_crista,flow_ant_crista,flow_sacc_crista,flow_utr_crista};
trajs_crista = {traj_post(:,3),traj_lat(:,3),traj_ant(:,3),traj_sacc(:,3),traj_utr(:,3)};
f7 = plotMultiFlow(flow_vest_fixed,flows_crista,trajs_crista,'plotFlow',false);
title(gca,'Specific Crista Innervations')

clear flows_crista trajs_crista
%%
toc

%%
% plot with mesh of vestibular nerve
% f9 = plotFlow(flow_vest,flow_vestinlet,traj_vestinlet,'plotNerveMesh',true);
% title(gca,'Vest. Inlet Origin')

%% Save figures
% figs = {f1, f3, f4, f5, f6, f7, f8};
% for i = 1:length(figs)
%     saveas(figs{i},['R:\Computational Modeling\Model as of 20220908\nerveTrajTest',num2str(i)])
%     saveas(figs{i},['R:\Computational Modeling\Model as of 20220908\nerveTrajTest',num2str(i)],'png')
% end
%%
% for i = 11:15
%     saveas(i,['C:\Users\Evan\OneDrive - Johns Hopkins\VNEL1DRV\_Vesper\Modeling\Modeling Results\Traj step size figures\point1umstep',num2str(i)])
% end   
%% 
% f = plotFlow(flow_vest,flow_post_crista,'p0',p0_test_post_crista,'plotFlow',false)