function [verts, p0] = fiberGenComsolv2(V_nerve, V_crista, numGen, locIndex, step, basisVecTags, model, dset)
%FIBERGENCOMSOLV2 This function generates the vertices (nodes) of axons
%given a comsol model and the vector field defining flow along a nerve and
%the crista to start from. It will randomly distribute the axons evenly
%along the crista surface dependent on a given locIndex, or normalized
%radius along the crista. It uses the stream3Comsol() function to generate
%a streamline using the vector field.
%   The function takes as arguments: 
%       V_nerve: the post data output from mpheval for the vector field
%           within a nerve
%       V_crista: the post data output from mpheval for any variable on the
%           desired crista (this function only uses the coordinates and 
%           simpleces returned, not the variable's value)
%       numGen: the total number of axons to generate. 
%       locIndex: a vector containing a normalized "radius" along the
%           crista to place each seed node at. Should be size numGen x 1
%       step: column vector of internode distances for each node of
%           Ranvier. To only set first two and fill the rest, use format 
%           [3.05e-3; 3.00e-3;-1]
%       basisVecTags: a 1 x 9 cell array containing the tags for the
%           components of each basis vector in Comsol, in the form of a
%           char vector or string. Should be in the form 
%           {e1x, e1y, e1z, e2x, e2y, e2z, e3x, e3y, e3z} 
%       model: Model object for Comsol model through Livelink.
%       
%   Returns:
%       verts: a cell array containing the vertices of
%           the fiber trajectory, with each vertex being a node of Ranvier.
%       p0: starting points on the crista for each generated axon
%   January 2023, Evan Vesper, VNEL

%% find centroid of the surface
% get vertices of starting triangle
nTri = size(V_crista.t,2);
% Comsol simplex returned with start index of 0, so must add 1 to work
% with Matlab's start index of 1
indv = V_crista.t + int32(ones(3,nTri));
% get vertices of simplex
v1 = V_crista.p(:,indv(1,:));
v2 = V_crista.p(:,indv(2,:));
v3 = V_crista.p(:,indv(3,:));
verts3d = V_crista.p;
nVerts = size(verts3d,2);

% calculate centroid of each triangle
centroids = (v1 + v2 + v3)/3;
% calculate area of each triangle
cProd = cross(v2 - v1, v3 - v1);
areas = sqrt(cProd(1,:).^2 + cProd(2,:).^2 + cProd(3,:).^2)/2;
% calculate centroid of the entire surface (average of the triangle
% centroids, weighted by triangle area)
surfCentroid = centroids*areas'/sum(areas);

%% Extract x-component of curvilinear coordinates at centroid
% mpheval(model,basisVecTags,'dataset',dset_vest,'selection',sel_vest_inlet_bnd);
[b11, b12, b13, b21, b22, b23, b31, b32, b33] = mphinterp(model, basisVecTags, 'coord', surfCentroid, 'dataset', dset);
% note: it shouldn't really change anything, but I rearranged the basis
% vectors so that the surface is projected onto x and y (e1 and e2) of new
% plane, just to look nice
normVec = -1*[b11; b12; b13]; % normal vector to plane (z')
e1 = [b31; b32; b33]; % basis vector 1 of plane (x')
e2 = [b21; b22; b23]; % basis vector 2 of plane (y')
%% Plot 3d crista and centroids
% f1 = plotFlow(V_nerve, V_crista, 'p0', centroids, 'plotFlow', false);
% hold on
% plot3(surfCentroid(1),surfCentroid(2),surfCentroid(3),'g*')
% plot3([surfCentroid(1), surfCentroid(1) + normVec(1)*0.1],[surfCentroid(2), surfCentroid(2) + normVec(2)*0.1],[surfCentroid(3), surfCentroid(3) + normVec(3)*0.1],'g-')
% plot3([surfCentroid(1), surfCentroid(1) + e1(1)*0.1],[surfCentroid(2), surfCentroid(2) + e1(2)*0.1],[surfCentroid(3), surfCentroid(3) + e1(3)*0.1],'r-')
% plot3([surfCentroid(1), surfCentroid(1) + e2(1)*0.1],[surfCentroid(2), surfCentroid(2) + e2(2)*0.1],[surfCentroid(3), surfCentroid(3) + e2(3)*0.1],'k-')
% title('3D Crista Surface with centroids')
% axis equal
% % legend('Crista surface mesh', 'Centroids of crista triangles', 'Centroid of mesh', 'Direction of projection plane') 

%% Flatten crista surface by projecting onto a plane
% The plane to be projected on will be perpendicular to direction of flow
% in nerve at the centroid of the crista surface mesh

% the plane is defined by the normal vector normVec
% let the centroid of the surface be the origin of the new plane
% orthonormal basis vectors, e1 and e2, are already defined by curvilinear
% coordinates from Comsol

s = dot(normVec*ones(1,nVerts), verts3d - surfCentroid); % normal distance from 3d point to plane (not actually needed)
t1 = dot(e1*ones(1,nVerts), verts3d - surfCentroid); % coordinate 1 for projected points
t2 = dot(e2*ones(1,nVerts), verts3d - surfCentroid); % coordinate 2 for projected points
verts2d = [t1; t2];


%% Plot flattened crista surface
% f2 = figure;
% 
% for i = 1:nTri
%     t14 = [t1(:,indv(1,i)), t1(:,indv(2,i)), t1(:,indv(3,i)), t1(:,indv(1,i))];
%     t24 = [t2(:,indv(1,i)), t2(:,indv(2,i)), t2(:,indv(3,i)), t2(:,indv(1,i))];
%     plot(t14, t24, '*-b')
%     if i == 1
%         hold on
%     end
% end
% plot(0,0,'g*')
% plot([0 0.1], [0 0], 'r')
% plot([0 0], [0 0.1], 'k')
% axis equal
% title('Flattened Crista Mesh')
%% Find the outer edge of the flattened surface

indSimplexOuterEdge = outerEdge(indv); % refers to indeces of the original/2d verts for each edge

%% Extract and sort vertices along perimeter of flattened crista
% convert from "simplex" indeces for each edge to just the indeces of all the outer edge verts
[indEdgeVerts, ia, ic] = unique(indSimplexOuterEdge(:)); 
edgeVerts2d = verts2d(:,indEdgeVerts);

% put outer edge vertices into clockwise order
theta = atan2(edgeVerts2d(2,:), edgeVerts2d(1,:));
[theta, sortedInds] = sort(theta);
edgeVerts2d = edgeVerts2d(:,sortedInds);

%% Plot outer edge
% 
% % using the "simplex" mapping
% f3 = figure;
% for i = 1:size(indSimplexOuterEdge,2)
%     plot([t1(indSimplexOuterEdge(1,i)), t1(indSimplexOuterEdge(2,i))], [t2(indSimplexOuterEdge(1,i)), t2(indSimplexOuterEdge(2,i))],'.-b');
%     if i == 1
%         hold on
%     end
% end
% title('Outer edge (flattened)')
% 
% % using sorted edge vertices
% % f3 = figure;
% % plot(edgeVerts2d(1,[1:end,1]),edgeVerts2d(2,[1:end,1]),'.-b')


%% Choose outer edge segment to place seed on
% calculate cumulative sum of the length of each edge segment for weighting

% since we know this shape is a closed loop, just match last vert to first
% vert to close the shape
edgeLengths = cumsum( sqrt( (edgeVerts2d(1,:)-edgeVerts2d(1,[2:end, 1])).^2 + (edgeVerts2d(2,:)-edgeVerts2d(2,[2:end, 1])).^2 ) );
perimeter = edgeLengths(end);

% randomly generate position along perimeter
edgeArcLen = perimeter*rand(numGen,1); % random length along perimeter
edgeLogic = cumsum(edgeLengths >= edgeArcLen,2) == 1; % determine which edge segment each length is on
[edgeSeedInd, ~] = find(edgeLogic');
edgeSeedPos = edgeLengths(edgeSeedInd)' - edgeArcLen; % length along each edge segment to place the seed vertice

edgeVectors =  edgeVerts2d(:,:)-edgeVerts2d(:,[2:end, 1]); % find vector defining orientation of each edge
edgeVectors = edgeVectors./([1;1] * (sqrt((edgeVectors(1,:).^2 + edgeVectors(2,:).^2)))); % normalize into unit vectors
edgeSeedVerts = edgeVerts2d(:,edgeSeedInd) - edgeVectors(:,edgeSeedInd).*([1;1]*edgeSeedPos'); % reverse from the clockwise-most point on the edge


%% Generate final seed point on flattened crista
% the centroid is already the origin of the coordinate system, so
% edgeSeedVerts is already a ray from the centroid to the outer edge

seedNodes2d = edgeSeedVerts.*([1;1]*locIndex');

%% Plot outer edge of the crista and generated seed nodes
% f4 = figure;
% tempEdgeVerts2d = edgeVerts2d(:,[1:end,1]);
% for i = 1:size(edgeVerts2d,2)
%     if i == 1
%         plot(tempEdgeVerts2d(1,i),tempEdgeVerts2d(2,i),'*k')
%         hold on
%         plot(tempEdgeVerts2d(1,i:i+1),tempEdgeVerts2d(2,i:i+1),'-k')
%         title('Crista and seeds (flattened)')
%     else
%         plot(tempEdgeVerts2d(1,i:i+1),tempEdgeVerts2d(2,i:i+1),'.-b')
%     end
%     pause(0.1)
%     thisEdgeSeeds = find(edgeSeedInd==i);
%     plot(edgeSeedVerts(1,thisEdgeSeeds),edgeSeedVerts(2,thisEdgeSeeds),'.m')
%     pause(0.1)
% end
% axis equal
% 
% % to just plot all the edgeSeedVerts at once
% % plot(edgeSeedVerts(1,:),edgeSeedVerts(2,:),'.r')
% 
% for i = 1:size(edgeVerts2d,2)
%     thisEdgeSeeds = find(edgeSeedInd==i);
%     for j = 1:length(thisEdgeSeeds)
%         plot([edgeSeedVerts(1,thisEdgeSeeds(j)), 0], [edgeSeedVerts(2,thisEdgeSeeds(j)), 0],'--m')
%         plot(seedNodes2d(1,thisEdgeSeeds(j)),seedNodes2d(2,thisEdgeSeeds(j)),'*r');
%         pause(0.1)
%     end
% end

%% Map to 3D

%%
% figure
% plot([triVert1(1) triVert2(1) triVert3(1) triVert1(1)], [triVert1(2) triVert2(2) triVert3(2) triVert1(2)])
% hold on
% plot(seedNodes2d(1,1),seedNodes2d(2,1),'*k')


%% Generate streamlines

[axonVerts, step_out] = stream3Comsol(V_nerve.p,V_nerve.t,V_nerve.d1,V_nerve.d2,...
    V_nerve.d3,seedNodes3d,step);

%% Plot 3d points and streamlines
% % plot3d(f1.CurrentAxes, seedNodes3d(1,:), seedNodes3d(2,:), seedNodes3d(3,:), '*')
% 
% f5 = plotFlow(V_nerve, V_crista, 'p0', seedNodes3d, 'plotFlow', false);
% title('3D Crista with Seed Nodes')
% for i = 1:numGen
%     plot3(axonVerts{i}(1,:),axonVerts{i}(2,:),axonVerts{i}(3,:),'-g.')
% 
% end

%% Return output variables
verts = axonVerts;
p0 = seedNodes3d;

%% Function definitions

function result = edgeNeighbors(v1Ind, v2Ind, indv)
    % This function returns the indices of the triangles bordering an edge
    % defined by two inputted vertices. The inputted vertices should
    % actually be connected on an edge. Returns result = [-1; x] if it is
    % on the edge of a surface/
    result = [-1; -1]; % if this edge is on the outside of the surface, then one of these will stay -1
	% cycle through all of the triangles
	for kk = 1:size(indv,2)
		if any(indv(:,kk) == v1Ind)
			if any(indv(:,kk) == v2Ind)
				% found one, add it to the list
				result(2) = result(1);
				result(1) = kk;
            end
        end
    end
end

function indOuterEdge = outerEdge(indv)
    % This functions returns the indeces of the outer edges of a given
    % 2-simplex surface. The output format will be a 2 x numEdgeSegments
    % array where each column contains the indeces of the the two vertices
    % defining the edge. The edges are not in order.
    indOuterEdge = [];

    for kk = 1:size(indv,2)
        
        vertA = indv(1,kk);
        vertB = indv(2,kk);
        vertC = indv(3,kk);
    
        adjacent = edgeNeighbors(vertA,vertB,indv);
        if (adjacent(1) == -1 || adjacent(2) == -1)
            indOuterEdge  = [indOuterEdge, [vertA; vertB]];
        end
        adjacent = edgeNeighbors(vertA,vertC,indv);
        if (adjacent(1) == -1 || adjacent(2) == -1)
            indOuterEdge  = [indOuterEdge, [vertA; vertC]];
        end
        adjacent = edgeNeighbors(vertB,vertC,indv);
        if (adjacent(1) == -1 || adjacent(2) == -1)
            indOuterEdge  = [indOuterEdge, [vertB; vertC]];
        end
    end
end

    function map

end